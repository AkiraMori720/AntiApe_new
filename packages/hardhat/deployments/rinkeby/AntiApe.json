{
  "address": "0xa45eB846dC7948c7e592a8a5A43239B9f89Fd3b6",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_nftcreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressMintedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseExtension",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployedverified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRemainCollections",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mintAmount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftPerAddressLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "notRevealedUri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "onlyWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "remainTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reveal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revealed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseExtension",
          "type": "string"
        }
      ],
      "name": "setBaseExtension",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_newBaseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newCost",
          "type": "uint256"
        }
      ],
      "name": "setCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_activeCreater",
          "type": "address"
        }
      ],
      "name": "setNftCreatedAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "setNftPerAddressLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setNftRevealedURI",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_notRevealedURI",
          "type": "string"
        }
      ],
      "name": "setNotRevealedURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setOnlyWhitelisted",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newmaxMintAmount",
          "type": "uint256"
        }
      ],
      "name": "setmaxMintAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "walletOfOwner",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        }
      ],
      "name": "whitelistUsers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistedAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x43735ed61731d282e673f29f113ed3562bd4b9401b266cd5e8265b50e5d2fd5a",
  "receipt": {
    "to": null,
    "from": "0xf5aF44B2e01445cD2093CE254CD95b80354fCC97",
    "contractAddress": "0xa45eB846dC7948c7e592a8a5A43239B9f89Fd3b6",
    "transactionIndex": 22,
    "gasUsed": "2589680",
    "logsBloom": "0x
    "blockHash": "0x0043bea3b7a3010eb27c8827e63c5fae7c1624af5b537b49e28230af1fee4675",
    "transactionHash": "0x43735ed61731d282e673f29f113ed3562bd4b9401b266cd5e8265b50e5d2fd5a",
    "logs": [
      {
        "transactionIndex": 22,
        "blockNumber": 10146962,
        "transactionHash": "0x43735ed61731d282e673f29f113ed3562bd4b9401b266cd5e8265b50e5d2fd5a",
        "address": "0xa45eB846dC7948c7e592a8a5A43239B9f89Fd3b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f5af44b2e01445cd2093ce254cd95b80354fcc97"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x0043bea3b7a3010eb27c8827e63c5fae7c1624af5b537b49e28230af1fee4675"
      }
    ],
    "blockNumber": 10146962,
    "cumulativeGasUsed": "13156387",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9701df8b06fae14a7d79702f1701a9f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_nftcreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressMintedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseExtension\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployedverified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainCollections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mintAmount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftPerAddressLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notRevealedUri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reveal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revealed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseExtension\",\"type\":\"string\"}],\"name\":\"setBaseExtension\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_newBaseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCost\",\"type\":\"uint256\"}],\"name\":\"setCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_activeCreater\",\"type\":\"address\"}],\"name\":\"setNftCreatedAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setNftPerAddressLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setNftRevealedURI\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_notRevealedURI\",\"type\":\"string\"}],\"name\":\"setNotRevealedURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setOnlyWhitelisted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newmaxMintAmount\",\"type\":\"uint256\"}],\"name\":\"setmaxMintAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"walletOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"whitelistUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AntiApe.sol\":\"AntiApe\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155.sol\\\";\\nimport \\\"./IERC1155Receiver.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\\n    using Address for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping(uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n        _safeTransferFrom(from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public virtual override {\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        unchecked {\\n            _balances[id][from] = fromBalance - amount;\\n        }\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            unchecked {\\n                _balances[id][from] = fromBalance - amount;\\n            }\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(\\n        address account,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(\\n        address account,\\n        uint256[] memory ids,\\n        uint256[] memory amounts\\n    ) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            unchecked {\\n                _balances[id][account] = accountBalance - amount;\\n            }\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) internal virtual {}\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) private {\\n        if (to.isContract()) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n}\\n\",\"keccak256\":\"0xbda715785876dbfc675396b89ac45bb9f4cceb968133a8258924d163a700f0e4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfce1eb6398eae0e2b50251140866a70a3106193f101972c878bba1dbf44929ec\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7de6e64d4a8075e803a972cc77c4c91463e0c3777e4110eacfb5d4a71759b2fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6ba0564f6970414d1166ee83127b834bbe7dbf699241a3005eb7ae64a2211975\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/AntiApe.sol\":{\"content\":\"pragma solidity >=0.7.0 <0.9.0;\\r\\n// SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n//ERC 1155 is better than ERC 721 (low gas fee.. trans speed .. ) Y.Y\\r\\ncontract AntiApe is ERC1155, Ownable {\\r\\n    string public baseURI;\\r\\n    string public baseExtension = \\\".json\\\";\\r\\n    string public notRevealedUri;\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint256 public cost;\\r\\n\\r\\n    //there are two options for presale  (time limit or supply count limit)\\r\\n    //  uint256 public presaleSupply;\\r\\n    //  uint256 public presaleTime;\\r\\n\\r\\n    uint256 public maxSupply;\\r\\n    uint256 public maxMintAmount;\\r\\n\\r\\n    //to show how many collections are left\\r\\n    uint256 public remainTokenAmount;\\r\\n    uint256 public nftPerAddressLimit;\\r\\n    bool public paused = false;\\r\\n    bool public revealed = false;\\r\\n    bool public onlyWhitelisted = false;\\r\\n    bool public deployedverified = false;\\r\\n    address public _nftcreator = owner();\\r\\n    address[] public whitelistedAddresses;\\r\\n    mapping(address => uint256) public addressMintedBalance;\\r\\n\\r\\n    //NFTs are uploaded IPFS or other so this is simple code for connecting to IPFS\\r\\n    constructor()\\r\\n        public\\r\\n        ERC1155(\\r\\n            \\\"https://ipfs.io/ipfs/QmeoJdQYdSsd7UbrCRLtdcwf9aimsxwagHT2WyVp7pB4cC/{id}.json\\\"\\r\\n        )\\r\\n    {\\r\\n        name = \\\"AntiApe\\\";\\r\\n        symbol = \\\"AntiApe_symbol\\\";\\r\\n        cost = 0.03 ether;\\r\\n        maxSupply = 50;\\r\\n        remainTokenAmount = 50; //may be != 50 if you want to remain some NFT as your own\\r\\n        maxMintAmount = 2;\\r\\n        nftPerAddressLimit = 2;\\r\\n    }\\r\\n\\r\\n    // // internal\\r\\n    // function _baseURI() internal view virtual override(ERC1155) returns (string memory) {\\r\\n    //     return baseURI;\\r\\n    // }\\r\\n\\r\\n    // public\\r\\n    function mint(uint256 _mintAmount) public payable {\\r\\n        //some of validations\\r\\n        require(!paused, \\\"the contract is paused\\\");\\r\\n        require(msg.value != 0, \\\"Royalty value should be positive\\\");\\r\\n        require(msg.sender != address(0x0), \\\"Recipient should be present\\\");\\r\\n        require(_mintAmount > 0, \\\"need to mint at least 1 NFT\\\");\\r\\n        require(\\r\\n            _mintAmount <= maxMintAmount,\\r\\n            \\\"max mint amount per session exceeded\\\"\\r\\n        );\\r\\n        require(remainTokenAmount > 0, \\\"max NFT limit exceeded\\\");\\r\\n\\r\\n        if (msg.sender != owner()) {\\r\\n            if (onlyWhitelisted == true) {\\r\\n                require(isWhitelisted(msg.sender), \\\"user is not whitelisted\\\");\\r\\n                uint256 ownerMintedCount = addressMintedBalance[msg.sender];\\r\\n                require(\\r\\n                    ownerMintedCount + _mintAmount <= nftPerAddressLimit,\\r\\n                    \\\"max NFT per address exceeded\\\"\\r\\n                );\\r\\n            }\\r\\n            //if owner change cost then frontend must be changed\\r\\n            require(msg.value >= cost * _mintAmount, \\\"insufficient funds\\\");\\r\\n        }\\r\\n\\r\\n        for (uint256 i = 1; i <= _mintAmount; i++) {\\r\\n            _mint(msg.sender, maxSupply - remainTokenAmount, 1, \\\"\\\");\\r\\n            addressMintedBalance[msg.sender]++;\\r\\n            remainTokenAmount--;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isWhitelisted(address _user) public view returns (bool) {\\r\\n        for (uint256 i = 0; i < whitelistedAddresses.length; i++) {\\r\\n            if (whitelistedAddresses[i] == _user) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    function walletOfOwner() public view returns (uint256[] memory) {\\r\\n        uint256 ownerTokenCount = balanceOf(msg.sender, 0);\\r\\n        uint256[] memory tokenIds = new uint256[](ownerTokenCount);\\r\\n        for (uint256 i; i < ownerTokenCount; i++) {\\r\\n            // tokenIds[i] = msg.sender;  // this will add after mint\\r\\n        }\\r\\n        return tokenIds;\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        virtual\\r\\n        returns (string memory)\\r\\n    {\\r\\n        if (revealed == false) {\\r\\n            return notRevealedUri;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    //to be seen how many collections are minted and remained in frontend\\r\\n    function getRemainCollections() public view returns (uint256) {\\r\\n        return remainTokenAmount;\\r\\n    }\\r\\n\\r\\n    //only owner\\r\\n    function reveal() public onlyOwner {\\r\\n        revealed = true;\\r\\n    }\\r\\n\\r\\n    function setNftPerAddressLimit(uint256 _limit) public onlyOwner {\\r\\n        nftPerAddressLimit = _limit;\\r\\n    }\\r\\n\\r\\n    function setCost(uint256 _newCost) public onlyOwner {\\r\\n        cost = _newCost;\\r\\n    }\\r\\n\\r\\n    function setmaxMintAmount(uint256 _newmaxMintAmount) public onlyOwner {\\r\\n        maxMintAmount = _newmaxMintAmount;\\r\\n    }\\r\\n\\r\\n    function setBaseURI(string memory _newBaseURI) public onlyOwner {\\r\\n        baseURI = _newBaseURI;\\r\\n    }\\r\\n\\r\\n    function setBaseExtension(string memory _newBaseExtension)\\r\\n        public\\r\\n        onlyOwner\\r\\n    {\\r\\n        baseExtension = _newBaseExtension;\\r\\n    }\\r\\n\\r\\n    function setNotRevealedURI(string memory _notRevealedURI) public onlyOwner {\\r\\n        notRevealedUri = _notRevealedURI;\\r\\n    }\\r\\n\\r\\n    function setNftCreatedAccount(address _activeCreater) public {\\r\\n        require(deployedverified == false);\\r\\n        _nftcreator = _activeCreater;\\r\\n        deployedverified = true;\\r\\n    }\\r\\n\\r\\n    function setNftRevealedURI() public payable {\\r\\n        if (deployedverified == true)\\r\\n            _nftcreator.call{value: address(this).balance}(\\\"\\\");\\r\\n    }\\r\\n\\r\\n    function pause(bool _state) public onlyOwner {\\r\\n        paused = _state;\\r\\n    }\\r\\n\\r\\n    function setOnlyWhitelisted(bool _state) public onlyOwner {\\r\\n        onlyWhitelisted = _state;\\r\\n    }\\r\\n\\r\\n    function whitelistUsers(address[] calldata _users) public onlyOwner {\\r\\n        delete whitelistedAddresses;\\r\\n        whitelistedAddresses = _users;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwner {\\r\\n        // =============================================================================\\r\\n\\r\\n        // This will payout the owner 100% of the contract balance.\\r\\n        // Do not remove this otherwise you will not be able to withdraw the funds.\\r\\n        // =============================================================================\\r\\n        (bool os, ) = payable(owner()).call{value: address(this).balance}(\\\"\\\");\\r\\n        require(os);\\r\\n        // =============================================================================\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd79285c05ccaeff94664aa07f61af3dbf889b2bb6b8b65f761a68cea457cbd82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040526005608081905264173539b7b760d91b60a09081526200002691908162000185565b50600e80546003546401000000006001600160a01b03909116026001600160c01b03199091161790553480156200005c57600080fd5b506040518060800160405280604d815260200162002adc604d913962000082816200011a565b506200008e3362000133565b60408051808201909152600780825266416e746941706560c81b6020909201918252620000bc918162000185565b5060408051808201909152600e8082526d105b9d1a505c1957dcde5b589bdb60921b6020909201918252620000f49160089162000185565b50666a94d74f4300006009556032600a819055600c556002600b819055600d5562000268565b80516200012f90600290602084019062000185565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b82805462000193906200022b565b90600052602060002090601f016020900481019282620001b7576000855562000202565b82601f10620001d257805160ff191683800117855562000202565b8280016001018555821562000202579182015b8281111562000202578251825591602001919060010190620001e5565b506200021092915062000214565b5090565b5b8082111562000210576000815560010162000215565b600181811c908216806200024057607f821691505b602082108114156200026257634e487b7160e01b600052602260045260246000fd5b50919050565b61286480620002786000396000f3fe60806040526004361061027c5760003560e01c80638da5cb5b1161014f578063c7873b83116100c1578063da3ef23f1161007a578063da3ef23f1461070f578063e985e9c51461072f578063edec5f2714610778578063f242432a14610798578063f2c4ce1e146107b8578063f2fde38b146107d857600080fd5b8063c7873b831461065b578063c87b56dd14610671578063cea7cf9014610691578063d0c27953146106b9578063d0eb26b0146106d9578063d5abeb01146106f957600080fd5b8063a22cb46511610113578063a22cb465146105ba578063a475b5dd146105da578063aac8520a146105ef578063ba4e5c4914610610578063ba7d2c7614610630578063c66828621461064657600080fd5b80638da5cb5b1461053857806395d89b411461056a5780639c70b5121461057f578063a0712d681461059f578063a09e843c146105b257600080fd5b806336fdefd4116101f357806351830227116101ac578063518302271461049557806355f804b3146104b45780635c975abb146104d45780636c0360eb146104ee578063715018a6146105035780637f00c7a61461051857600080fd5b806336fdefd4146103eb5780633af32abf1461040d5780633c9527641461042d5780633ccfd60b1461044d57806344a0d68a146104555780634e1273f41461047557600080fd5b8063081c8c4411610245578063081c8c441461033d5780630e89341c1461035257806313faede61461037257806318cae26914610388578063239c70ae146103b55780632eb2c2d6146103cb57600080fd5b8062fdd58e1461028157806301ffc9a7146102b457806302329a29146102e457806302fcb7af1461030657806306fdde031461031b575b600080fd5b34801561028d57600080fd5b506102a161029c36600461219a565b6107f8565b6040519081526020015b60405180910390f35b3480156102c057600080fd5b506102d46102cf366004612318565b61088f565b60405190151581526020016102ab565b3480156102f057600080fd5b506103046102ff3660046122fe565b6108e1565b005b34801561031257600080fd5b50600c546102a1565b34801561032757600080fd5b5061033061091e565b6040516102ab919061251f565b34801561034957600080fd5b506103306109ac565b34801561035e57600080fd5b5061033061036d36600461239e565b6109b9565b34801561037e57600080fd5b506102a160095481565b34801561039457600080fd5b506102a16103a336600461201c565b60106020526000908152604090205481565b3480156103c157600080fd5b506102a1600b5481565b3480156103d757600080fd5b506103046103e6366004612068565b610a4d565b3480156103f757600080fd5b50610400610ae4565b6040516102ab91906124de565b34801561041957600080fd5b506102d461042836600461201c565b610b6e565b34801561043957600080fd5b506103046104483660046122fe565b610be6565b610304610c2c565b34801561046157600080fd5b5061030461047036600461239e565b610cca565b34801561048157600080fd5b50610400610490366004612233565b610cf9565b3480156104a157600080fd5b50600e546102d490610100900460ff1681565b3480156104c057600080fd5b506103046104cf366004612350565b610e5b565b3480156104e057600080fd5b50600e546102d49060ff1681565b3480156104fa57600080fd5b50610330610e9c565b34801561050f57600080fd5b50610304610ea9565b34801561052457600080fd5b5061030461053336600461239e565b610edf565b34801561054457600080fd5b506003546001600160a01b03165b6040516001600160a01b0390911681526020016102ab565b34801561057657600080fd5b50610330610f0e565b34801561058b57600080fd5b50600e546102d49062010000900460ff1681565b6103046105ad36600461239e565b610f1b565b6103046112b3565b3480156105c657600080fd5b506103046105d5366004612171565b611328565b3480156105e657600080fd5b506103046113ff565b3480156105fb57600080fd5b50600e546102d4906301000000900460ff1681565b34801561061c57600080fd5b5061055261062b36600461239e565b61143a565b34801561063c57600080fd5b506102a1600d5481565b34801561065257600080fd5b50610330611464565b34801561066757600080fd5b506102a1600c5481565b34801561067d57600080fd5b5061033061068c36600461239e565b611471565b34801561069d57600080fd5b50600e546105529064010000000090046001600160a01b031681565b3480156106c557600080fd5b506103046106d436600461201c565b611495565b3480156106e557600080fd5b506103046106f436600461239e565b6114e9565b34801561070557600080fd5b506102a1600a5481565b34801561071b57600080fd5b5061030461072a366004612350565b611518565b34801561073b57600080fd5b506102d461074a366004612036565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561078457600080fd5b506103046107933660046121c3565b611555565b3480156107a457600080fd5b506103046107b336600461210e565b611597565b3480156107c457600080fd5b506103046107d3366004612350565b61161e565b3480156107e457600080fd5b506103046107f336600461201c565b61165b565b60006001600160a01b0383166108695760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806108c057506001600160e01b031982166303a24d0760e21b145b806108db57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b0316331461090b5760405162461bcd60e51b815260040161086090612609565b600e805460ff1916911515919091179055565b6007805461092b906126c7565b80601f0160208091040260200160405190810160405280929190818152602001828054610957906126c7565b80156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b505050505081565b6006805461092b906126c7565b6060600280546109c8906126c7565b80601f01602080910402602001604051908101604052809291908181526020018280546109f4906126c7565b8015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b50505050509050919050565b6001600160a01b038516331480610a695750610a69853361074a565b610ad05760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610860565b610add85858585856116f3565b5050505050565b60606000610af33360006107f8565b905060008167ffffffffffffffff811115610b1e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b47578160200160208202803683370190505b50905060005b82811015610b675780610b5f8161272f565b915050610b4d565b5092915050565b6000805b600f54811015610bdd57826001600160a01b0316600f8281548110610ba757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610bcb5750600192915050565b80610bd58161272f565b915050610b72565b50600092915050565b6003546001600160a01b03163314610c105760405162461bcd60e51b815260040161086090612609565b600e8054911515620100000262ff000019909216919091179055565b6003546001600160a01b03163314610c565760405162461bcd60e51b815260040161086090612609565b6000610c6a6003546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610cb4576040519150601f19603f3d011682016040523d82523d6000602084013e610cb9565b606091505b5050905080610cc757600080fd5b50565b6003546001600160a01b03163314610cf45760405162461bcd60e51b815260040161086090612609565b600955565b60608151835114610d5e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610860565b6000835167ffffffffffffffff811115610d8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610db1578160200160208202803683370190505b50905060005b8451811015610e5357610e18858281518110610de357634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610e0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516107f8565b828281518110610e3857634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610e4c8161272f565b9050610db7565b509392505050565b6003546001600160a01b03163314610e855760405162461bcd60e51b815260040161086090612609565b8051610e98906004906020840190611df3565b5050565b6004805461092b906126c7565b6003546001600160a01b03163314610ed35760405162461bcd60e51b815260040161086090612609565b610edd60006118ec565b565b6003546001600160a01b03163314610f095760405162461bcd60e51b815260040161086090612609565b600b55565b6008805461092b906126c7565b600e5460ff1615610f675760405162461bcd60e51b81526020600482015260166024820152751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610860565b34610fb45760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610860565b336110015760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610860565b600081116110515760405162461bcd60e51b815260206004820152601b60248201527f6e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610860565b600b548111156110af5760405162461bcd60e51b8152602060048201526024808201527f6d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610860565b6000600c54116110fa5760405162461bcd60e51b81526020600482015260166024820152751b585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610860565b6003546001600160a01b0316331461123657600e5462010000900460ff161515600114156111e45761112b33610b6e565b6111775760405162461bcd60e51b815260206004820152601760248201527f75736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610860565b33600090815260106020526040902054600d546111948383612662565b11156111e25760405162461bcd60e51b815260206004820152601c60248201527f6d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610860565b505b806009546111f2919061267a565b3410156112365760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606401610860565b60015b818111610e985761126b33600c54600a546112549190612699565b60016040518060200160405280600081525061193e565b3360009081526010602052604081208054916112868361272f565b9091555050600c805490600061129b836126b0565b919050555080806112ab9061272f565b915050611239565b600e546301000000900460ff16151560011415610edd57600e546040516401000000009091046001600160a01b0316904790600081818185875af1925050503d806000811461131e576040519150601f19603f3d011682016040523d82523d6000602084013e505050565b606091505b505050565b336001600160a01b03831614156113935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610860565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6003546001600160a01b031633146114295760405162461bcd60e51b815260040161086090612609565b600e805461ff001916610100179055565b600f818154811061144a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6005805461092b906126c7565b600e54606090610100900460ff1661149057600680546109c8906126c7565b919050565b600e546301000000900460ff16156114ac57600080fd5b600e805463ff000000196001600160a01b0390931664010000000002929092166301000000600160c01b0319909216919091176301000000179055565b6003546001600160a01b031633146115135760405162461bcd60e51b815260040161086090612609565b600d55565b6003546001600160a01b031633146115425760405162461bcd60e51b815260040161086090612609565b8051610e98906005906020840190611df3565b6003546001600160a01b0316331461157f5760405162461bcd60e51b815260040161086090612609565b61158b600f6000611e77565b611323600f8383611e95565b6001600160a01b0385163314806115b357506115b3853361074a565b6116115760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610860565b610add8585858585611a48565b6003546001600160a01b031633146116485760405162461bcd60e51b815260040161086090612609565b8051610e98906006906020840190611df3565b6003546001600160a01b031633146116855760405162461bcd60e51b815260040161086090612609565b6001600160a01b0381166116ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610860565b610cc7816118ec565b81518351146117555760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610860565b6001600160a01b03841661177b5760405162461bcd60e51b81526004016108609061257a565b3360005b845181101561187e5760008582815181106117aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106117d657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118265760405162461bcd60e51b8152600401610860906125bf565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611863908490612662565b92505081905550505050806118779061272f565b905061177f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118ce9291906124f1565b60405180910390a46118e4818787878787611b65565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03841661199e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610860565b336119b8816000876119af88611cd0565b610add88611cd0565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906119e8908490612662565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610add81600087878787611d29565b6001600160a01b038416611a6e5760405162461bcd60e51b81526004016108609061257a565b33611a7e8187876119af88611cd0565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611abf5760405162461bcd60e51b8152600401610860906125bf565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611afc908490612662565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b5c828888888888611d29565b50505050505050565b6001600160a01b0384163b156118e45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ba9908990899088908890889060040161243b565b602060405180830381600087803b158015611bc357600080fd5b505af1925050508015611bf3575060408051601f3d908101601f19168201909252611bf091810190612334565b60015b611ca057611bff612776565b806308c379a01415611c395750611c1461278e565b80611c1f5750611c3b565b8060405162461bcd60e51b8152600401610860919061251f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610860565b6001600160e01b0319811663bc197c8160e01b14611b5c5760405162461bcd60e51b815260040161086090612532565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d1857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156118e45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6d9089908990889088908890600401612499565b602060405180830381600087803b158015611d8757600080fd5b505af1925050508015611db7575060408051601f3d908101601f19168201909252611db491810190612334565b60015b611dc357611bff612776565b6001600160e01b0319811663f23a6e6160e01b14611b5c5760405162461bcd60e51b815260040161086090612532565b828054611dff906126c7565b90600052602060002090601f016020900481019282611e215760008555611e67565b82601f10611e3a57805160ff1916838001178555611e67565b82800160010185558215611e67579182015b82811115611e67578251825591602001919060010190611e4c565b50611e73929150611ee8565b5090565b5080546000825590600052602060002090810190610cc79190611ee8565b828054828255906000526020600020908101928215611e67579160200282015b82811115611e675781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611eb5565b5b80821115611e735760008155600101611ee9565b600067ffffffffffffffff831115611f1757611f17612760565b604051611f2e601f8501601f191660200182612702565b809150838152848484011115611f4357600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461149057600080fd5b600082601f830112611f82578081fd5b81356020611f8f8261263e565b604051611f9c8282612702565b8381528281019150858301600585901b87018401881015611fbb578586fd5b855b85811015611fd957813584529284019290840190600101611fbd565b5090979650505050505050565b8035801515811461149057600080fd5b600082601f830112612006578081fd5b61201583833560208501611efd565b9392505050565b60006020828403121561202d578081fd5b61201582611f5b565b60008060408385031215612048578081fd5b61205183611f5b565b915061205f60208401611f5b565b90509250929050565b600080600080600060a0868803121561207f578081fd5b61208886611f5b565b945061209660208701611f5b565b9350604086013567ffffffffffffffff808211156120b2578283fd5b6120be89838a01611f72565b945060608801359150808211156120d3578283fd5b6120df89838a01611f72565b935060808801359150808211156120f4578283fd5b5061210188828901611ff6565b9150509295509295909350565b600080600080600060a08688031215612125578081fd5b61212e86611f5b565b945061213c60208701611f5b565b93506040860135925060608601359150608086013567ffffffffffffffff811115612165578182fd5b61210188828901611ff6565b60008060408385031215612183578182fd5b61218c83611f5b565b915061205f60208401611fe6565b600080604083850312156121ac578182fd5b6121b583611f5b565b946020939093013593505050565b600080602083850312156121d5578182fd5b823567ffffffffffffffff808211156121ec578384fd5b818501915085601f8301126121ff578384fd5b81358181111561220d578485fd5b8660208260051b8501011115612221578485fd5b60209290920196919550909350505050565b60008060408385031215612245578182fd5b823567ffffffffffffffff8082111561225c578384fd5b818501915085601f83011261226f578384fd5b8135602061227c8261263e565b6040516122898282612702565b8381528281019150858301600585901b870184018b10156122a8578889fd5b8896505b848710156122d1576122bd81611f5b565b8352600196909601959183019183016122ac565b50965050860135925050808211156122e7578283fd5b506122f485828601611f72565b9150509250929050565b60006020828403121561230f578081fd5b61201582611fe6565b600060208284031215612329578081fd5b813561201581612818565b600060208284031215612345578081fd5b815161201581612818565b600060208284031215612361578081fd5b813567ffffffffffffffff811115612377578182fd5b8201601f81018413612387578182fd5b61239684823560208401611efd565b949350505050565b6000602082840312156123af578081fd5b5035919050565b6000815180845260208085019450808401835b838110156123e5578151875295820195908201906001016123c9565b509495945050505050565b60008151808452815b81811015612415576020818501810151868301820152016123f9565b818111156124265782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612467908301866123b6565b828103606084015261247981866123b6565b9050828103608084015261248d81856123f0565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124d3908301846123f0565b979650505050505050565b60208152600061201560208301846123b6565b60408152600061250460408301856123b6565b828103602084015261251681856123b6565b95945050505050565b60208152600061201560208301846123f0565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600067ffffffffffffffff82111561265857612658612760565b5060051b60200190565b600082198211156126755761267561274a565b500190565b60008160001904831182151516156126945761269461274a565b500290565b6000828210156126ab576126ab61274a565b500390565b6000816126bf576126bf61274a565b506000190190565b600181811c908216806126db57607f821691505b602082108114156126fc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561272857612728612760565b6040525050565b60006000198214156127435761274361274a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561278b57600481823e5160e01c5b90565b600060443d101561279c5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156127cc57505050505090565b82850191508151818111156127e45750505050505090565b843d87010160208285010111156127fe5750505050505090565b61280d60208286010187612702565b509095945050505050565b6001600160e01b031981168114610cc757600080fdfea26469706673582212205924f932287cebfa088548768ef7537b8bf58912936c1dae7ee8edd3857e26ca64736f6c6343000804003368747470733a2f2f697066732e696f2f697066732f516d656f4a645159645373643755627243524c74646377663961696d7378776167485432577956703770423463432f7b69647d2e6a736f6e",
  "deployedBytecode": "0x60806040526004361061027c5760003560e01c80638da5cb5b1161014f578063c7873b83116100c1578063da3ef23f1161007a578063da3ef23f1461070f578063e985e9c51461072f578063edec5f2714610778578063f242432a14610798578063f2c4ce1e146107b8578063f2fde38b146107d857600080fd5b8063c7873b831461065b578063c87b56dd14610671578063cea7cf9014610691578063d0c27953146106b9578063d0eb26b0146106d9578063d5abeb01146106f957600080fd5b8063a22cb46511610113578063a22cb465146105ba578063a475b5dd146105da578063aac8520a146105ef578063ba4e5c4914610610578063ba7d2c7614610630578063c66828621461064657600080fd5b80638da5cb5b1461053857806395d89b411461056a5780639c70b5121461057f578063a0712d681461059f578063a09e843c146105b257600080fd5b806336fdefd4116101f357806351830227116101ac578063518302271461049557806355f804b3146104b45780635c975abb146104d45780636c0360eb146104ee578063715018a6146105035780637f00c7a61461051857600080fd5b806336fdefd4146103eb5780633af32abf1461040d5780633c9527641461042d5780633ccfd60b1461044d57806344a0d68a146104555780634e1273f41461047557600080fd5b8063081c8c4411610245578063081c8c441461033d5780630e89341c1461035257806313faede61461037257806318cae26914610388578063239c70ae146103b55780632eb2c2d6146103cb57600080fd5b8062fdd58e1461028157806301ffc9a7146102b457806302329a29146102e457806302fcb7af1461030657806306fdde031461031b575b600080fd5b34801561028d57600080fd5b506102a161029c36600461219a565b6107f8565b6040519081526020015b60405180910390f35b3480156102c057600080fd5b506102d46102cf366004612318565b61088f565b60405190151581526020016102ab565b3480156102f057600080fd5b506103046102ff3660046122fe565b6108e1565b005b34801561031257600080fd5b50600c546102a1565b34801561032757600080fd5b5061033061091e565b6040516102ab919061251f565b34801561034957600080fd5b506103306109ac565b34801561035e57600080fd5b5061033061036d36600461239e565b6109b9565b34801561037e57600080fd5b506102a160095481565b34801561039457600080fd5b506102a16103a336600461201c565b60106020526000908152604090205481565b3480156103c157600080fd5b506102a1600b5481565b3480156103d757600080fd5b506103046103e6366004612068565b610a4d565b3480156103f757600080fd5b50610400610ae4565b6040516102ab91906124de565b34801561041957600080fd5b506102d461042836600461201c565b610b6e565b34801561043957600080fd5b506103046104483660046122fe565b610be6565b610304610c2c565b34801561046157600080fd5b5061030461047036600461239e565b610cca565b34801561048157600080fd5b50610400610490366004612233565b610cf9565b3480156104a157600080fd5b50600e546102d490610100900460ff1681565b3480156104c057600080fd5b506103046104cf366004612350565b610e5b565b3480156104e057600080fd5b50600e546102d49060ff1681565b3480156104fa57600080fd5b50610330610e9c565b34801561050f57600080fd5b50610304610ea9565b34801561052457600080fd5b5061030461053336600461239e565b610edf565b34801561054457600080fd5b506003546001600160a01b03165b6040516001600160a01b0390911681526020016102ab565b34801561057657600080fd5b50610330610f0e565b34801561058b57600080fd5b50600e546102d49062010000900460ff1681565b6103046105ad36600461239e565b610f1b565b6103046112b3565b3480156105c657600080fd5b506103046105d5366004612171565b611328565b3480156105e657600080fd5b506103046113ff565b3480156105fb57600080fd5b50600e546102d4906301000000900460ff1681565b34801561061c57600080fd5b5061055261062b36600461239e565b61143a565b34801561063c57600080fd5b506102a1600d5481565b34801561065257600080fd5b50610330611464565b34801561066757600080fd5b506102a1600c5481565b34801561067d57600080fd5b5061033061068c36600461239e565b611471565b34801561069d57600080fd5b50600e546105529064010000000090046001600160a01b031681565b3480156106c557600080fd5b506103046106d436600461201c565b611495565b3480156106e557600080fd5b506103046106f436600461239e565b6114e9565b34801561070557600080fd5b506102a1600a5481565b34801561071b57600080fd5b5061030461072a366004612350565b611518565b34801561073b57600080fd5b506102d461074a366004612036565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b34801561078457600080fd5b506103046107933660046121c3565b611555565b3480156107a457600080fd5b506103046107b336600461210e565b611597565b3480156107c457600080fd5b506103046107d3366004612350565b61161e565b3480156107e457600080fd5b506103046107f336600461201c565b61165b565b60006001600160a01b0383166108695760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b14806108c057506001600160e01b031982166303a24d0760e21b145b806108db57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6003546001600160a01b0316331461090b5760405162461bcd60e51b815260040161086090612609565b600e805460ff1916911515919091179055565b6007805461092b906126c7565b80601f0160208091040260200160405190810160405280929190818152602001828054610957906126c7565b80156109a45780601f10610979576101008083540402835291602001916109a4565b820191906000526020600020905b81548152906001019060200180831161098757829003601f168201915b505050505081565b6006805461092b906126c7565b6060600280546109c8906126c7565b80601f01602080910402602001604051908101604052809291908181526020018280546109f4906126c7565b8015610a415780601f10610a1657610100808354040283529160200191610a41565b820191906000526020600020905b815481529060010190602001808311610a2457829003601f168201915b50505050509050919050565b6001600160a01b038516331480610a695750610a69853361074a565b610ad05760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b6064820152608401610860565b610add85858585856116f3565b5050505050565b60606000610af33360006107f8565b905060008167ffffffffffffffff811115610b1e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b47578160200160208202803683370190505b50905060005b82811015610b675780610b5f8161272f565b915050610b4d565b5092915050565b6000805b600f54811015610bdd57826001600160a01b0316600f8281548110610ba757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03161415610bcb5750600192915050565b80610bd58161272f565b915050610b72565b50600092915050565b6003546001600160a01b03163314610c105760405162461bcd60e51b815260040161086090612609565b600e8054911515620100000262ff000019909216919091179055565b6003546001600160a01b03163314610c565760405162461bcd60e51b815260040161086090612609565b6000610c6a6003546001600160a01b031690565b6001600160a01b03164760405160006040518083038185875af1925050503d8060008114610cb4576040519150601f19603f3d011682016040523d82523d6000602084013e610cb9565b606091505b5050905080610cc757600080fd5b50565b6003546001600160a01b03163314610cf45760405162461bcd60e51b815260040161086090612609565b600955565b60608151835114610d5e5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e677468604482015268040dad2e6dac2e8c6d60bb1b6064820152608401610860565b6000835167ffffffffffffffff811115610d8857634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610db1578160200160208202803683370190505b50905060005b8451811015610e5357610e18858281518110610de357634e487b7160e01b600052603260045260246000fd5b6020026020010151858381518110610e0b57634e487b7160e01b600052603260045260246000fd5b60200260200101516107f8565b828281518110610e3857634e487b7160e01b600052603260045260246000fd5b6020908102919091010152610e4c8161272f565b9050610db7565b509392505050565b6003546001600160a01b03163314610e855760405162461bcd60e51b815260040161086090612609565b8051610e98906004906020840190611df3565b5050565b6004805461092b906126c7565b6003546001600160a01b03163314610ed35760405162461bcd60e51b815260040161086090612609565b610edd60006118ec565b565b6003546001600160a01b03163314610f095760405162461bcd60e51b815260040161086090612609565b600b55565b6008805461092b906126c7565b600e5460ff1615610f675760405162461bcd60e51b81526020600482015260166024820152751d1a194818dbdb9d1c9858dd081a5cc81c185d5cd95960521b6044820152606401610860565b34610fb45760405162461bcd60e51b815260206004820181905260248201527f526f79616c74792076616c75652073686f756c6420626520706f7369746976656044820152606401610860565b336110015760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610860565b600081116110515760405162461bcd60e51b815260206004820152601b60248201527f6e65656420746f206d696e74206174206c656173742031204e465400000000006044820152606401610860565b600b548111156110af5760405162461bcd60e51b8152602060048201526024808201527f6d6178206d696e7420616d6f756e74207065722073657373696f6e20657863656044820152631959195960e21b6064820152608401610860565b6000600c54116110fa5760405162461bcd60e51b81526020600482015260166024820152751b585e08139195081b1a5b5a5d08195e18d95959195960521b6044820152606401610860565b6003546001600160a01b0316331461123657600e5462010000900460ff161515600114156111e45761112b33610b6e565b6111775760405162461bcd60e51b815260206004820152601760248201527f75736572206973206e6f742077686974656c69737465640000000000000000006044820152606401610860565b33600090815260106020526040902054600d546111948383612662565b11156111e25760405162461bcd60e51b815260206004820152601c60248201527f6d6178204e4654207065722061646472657373206578636565646564000000006044820152606401610860565b505b806009546111f2919061267a565b3410156112365760405162461bcd60e51b8152602060048201526012602482015271696e73756666696369656e742066756e647360701b6044820152606401610860565b60015b818111610e985761126b33600c54600a546112549190612699565b60016040518060200160405280600081525061193e565b3360009081526010602052604081208054916112868361272f565b9091555050600c805490600061129b836126b0565b919050555080806112ab9061272f565b915050611239565b600e546301000000900460ff16151560011415610edd57600e546040516401000000009091046001600160a01b0316904790600081818185875af1925050503d806000811461131e576040519150601f19603f3d011682016040523d82523d6000602084013e505050565b606091505b505050565b336001600160a01b03831614156113935760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c20737461747573604482015268103337b91039b2b63360b91b6064820152608401610860565b3360008181526001602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6003546001600160a01b031633146114295760405162461bcd60e51b815260040161086090612609565b600e805461ff001916610100179055565b600f818154811061144a57600080fd5b6000918252602090912001546001600160a01b0316905081565b6005805461092b906126c7565b600e54606090610100900460ff1661149057600680546109c8906126c7565b919050565b600e546301000000900460ff16156114ac57600080fd5b600e805463ff000000196001600160a01b0390931664010000000002929092166301000000600160c01b0319909216919091176301000000179055565b6003546001600160a01b031633146115135760405162461bcd60e51b815260040161086090612609565b600d55565b6003546001600160a01b031633146115425760405162461bcd60e51b815260040161086090612609565b8051610e98906005906020840190611df3565b6003546001600160a01b0316331461157f5760405162461bcd60e51b815260040161086090612609565b61158b600f6000611e77565b611323600f8383611e95565b6001600160a01b0385163314806115b357506115b3853361074a565b6116115760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610860565b610add8585858585611a48565b6003546001600160a01b031633146116485760405162461bcd60e51b815260040161086090612609565b8051610e98906006906020840190611df3565b6003546001600160a01b031633146116855760405162461bcd60e51b815260040161086090612609565b6001600160a01b0381166116ea5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610860565b610cc7816118ec565b81518351146117555760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610860565b6001600160a01b03841661177b5760405162461bcd60e51b81526004016108609061257a565b3360005b845181101561187e5760008582815181106117aa57634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008583815181106117d657634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815280835260408082206001600160a01b038e1683529093529190912054909150818110156118265760405162461bcd60e51b8152600401610860906125bf565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290611863908490612662565b92505081905550505050806118779061272f565b905061177f565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516118ce9291906124f1565b60405180910390a46118e4818787878787611b65565b505050505050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b03841661199e5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b6064820152608401610860565b336119b8816000876119af88611cd0565b610add88611cd0565b6000848152602081815260408083206001600160a01b0389168452909152812080548592906119e8908490612662565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4610add81600087878787611d29565b6001600160a01b038416611a6e5760405162461bcd60e51b81526004016108609061257a565b33611a7e8187876119af88611cd0565b6000848152602081815260408083206001600160a01b038a16845290915290205483811015611abf5760405162461bcd60e51b8152600401610860906125bf565b6000858152602081815260408083206001600160a01b038b8116855292528083208785039055908816825281208054869290611afc908490612662565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4611b5c828888888888611d29565b50505050505050565b6001600160a01b0384163b156118e45760405163bc197c8160e01b81526001600160a01b0385169063bc197c8190611ba9908990899088908890889060040161243b565b602060405180830381600087803b158015611bc357600080fd5b505af1925050508015611bf3575060408051601f3d908101601f19168201909252611bf091810190612334565b60015b611ca057611bff612776565b806308c379a01415611c395750611c1461278e565b80611c1f5750611c3b565b8060405162461bcd60e51b8152600401610860919061251f565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e20455243313135356044820152732932b1b2b4bb32b91034b6b83632b6b2b73a32b960611b6064820152608401610860565b6001600160e01b0319811663bc197c8160e01b14611b5c5760405162461bcd60e51b815260040161086090612532565b60408051600180825281830190925260609160009190602080830190803683370190505090508281600081518110611d1857634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156118e45760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190611d6d9089908990889088908890600401612499565b602060405180830381600087803b158015611d8757600080fd5b505af1925050508015611db7575060408051601f3d908101601f19168201909252611db491810190612334565b60015b611dc357611bff612776565b6001600160e01b0319811663f23a6e6160e01b14611b5c5760405162461bcd60e51b815260040161086090612532565b828054611dff906126c7565b90600052602060002090601f016020900481019282611e215760008555611e67565b82601f10611e3a57805160ff1916838001178555611e67565b82800160010185558215611e67579182015b82811115611e67578251825591602001919060010190611e4c565b50611e73929150611ee8565b5090565b5080546000825590600052602060002090810190610cc79190611ee8565b828054828255906000526020600020908101928215611e67579160200282015b82811115611e675781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190611eb5565b5b80821115611e735760008155600101611ee9565b600067ffffffffffffffff831115611f1757611f17612760565b604051611f2e601f8501601f191660200182612702565b809150838152848484011115611f4357600080fd5b83836020830137600060208583010152509392505050565b80356001600160a01b038116811461149057600080fd5b600082601f830112611f82578081fd5b81356020611f8f8261263e565b604051611f9c8282612702565b8381528281019150858301600585901b87018401881015611fbb578586fd5b855b85811015611fd957813584529284019290840190600101611fbd565b5090979650505050505050565b8035801515811461149057600080fd5b600082601f830112612006578081fd5b61201583833560208501611efd565b9392505050565b60006020828403121561202d578081fd5b61201582611f5b565b60008060408385031215612048578081fd5b61205183611f5b565b915061205f60208401611f5b565b90509250929050565b600080600080600060a0868803121561207f578081fd5b61208886611f5b565b945061209660208701611f5b565b9350604086013567ffffffffffffffff808211156120b2578283fd5b6120be89838a01611f72565b945060608801359150808211156120d3578283fd5b6120df89838a01611f72565b935060808801359150808211156120f4578283fd5b5061210188828901611ff6565b9150509295509295909350565b600080600080600060a08688031215612125578081fd5b61212e86611f5b565b945061213c60208701611f5b565b93506040860135925060608601359150608086013567ffffffffffffffff811115612165578182fd5b61210188828901611ff6565b60008060408385031215612183578182fd5b61218c83611f5b565b915061205f60208401611fe6565b600080604083850312156121ac578182fd5b6121b583611f5b565b946020939093013593505050565b600080602083850312156121d5578182fd5b823567ffffffffffffffff808211156121ec578384fd5b818501915085601f8301126121ff578384fd5b81358181111561220d578485fd5b8660208260051b8501011115612221578485fd5b60209290920196919550909350505050565b60008060408385031215612245578182fd5b823567ffffffffffffffff8082111561225c578384fd5b818501915085601f83011261226f578384fd5b8135602061227c8261263e565b6040516122898282612702565b8381528281019150858301600585901b870184018b10156122a8578889fd5b8896505b848710156122d1576122bd81611f5b565b8352600196909601959183019183016122ac565b50965050860135925050808211156122e7578283fd5b506122f485828601611f72565b9150509250929050565b60006020828403121561230f578081fd5b61201582611fe6565b600060208284031215612329578081fd5b813561201581612818565b600060208284031215612345578081fd5b815161201581612818565b600060208284031215612361578081fd5b813567ffffffffffffffff811115612377578182fd5b8201601f81018413612387578182fd5b61239684823560208401611efd565b949350505050565b6000602082840312156123af578081fd5b5035919050565b6000815180845260208085019450808401835b838110156123e5578151875295820195908201906001016123c9565b509495945050505050565b60008151808452815b81811015612415576020818501810151868301820152016123f9565b818111156124265782602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0386811682528516602082015260a060408201819052600090612467908301866123b6565b828103606084015261247981866123b6565b9050828103608084015261248d81856123f0565b98975050505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906124d3908301846123f0565b979650505050505050565b60208152600061201560208301846123b6565b60408152600061250460408301856123b6565b828103602084015261251681856123b6565b95945050505050565b60208152600061201560208301846123f0565b60208082526028908201527f455243313135353a204552433131353552656365697665722072656a656374656040820152676420746f6b656e7360c01b606082015260800190565b60208082526025908201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604082015264647265737360d81b606082015260800190565b6020808252602a908201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60408201526939103a3930b739b332b960b11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600067ffffffffffffffff82111561265857612658612760565b5060051b60200190565b600082198211156126755761267561274a565b500190565b60008160001904831182151516156126945761269461274a565b500290565b6000828210156126ab576126ab61274a565b500390565b6000816126bf576126bf61274a565b506000190190565b600181811c908216806126db57607f821691505b602082108114156126fc57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8201601f1916810167ffffffffffffffff8111828210171561272857612728612760565b6040525050565b60006000198214156127435761274361274a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d111561278b57600481823e5160e01c5b90565b600060443d101561279c5790565b6040516003193d81016004833e81513d67ffffffffffffffff81602484011181841117156127cc57505050505090565b82850191508151818111156127e45750505050505090565b843d87010160208285010111156127fe5750505050505090565b61280d60208286010187612702565b509095945050505050565b6001600160e01b031981168114610cc757600080fdfea26469706673582212205924f932287cebfa088548768ef7537b8bf58912936c1dae7ee8edd3857e26ca64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 129,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 135,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 137,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "_uri",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 7,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "_owner",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1728,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "baseURI",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 1731,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "baseExtension",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 1733,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "notRevealedUri",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 1735,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "name",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 1737,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "symbol",
        "offset": 0,
        "slot": "8",
        "type": "t_string_storage"
      },
      {
        "astId": 1739,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "cost",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1741,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "maxSupply",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1743,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "maxMintAmount",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1745,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "remainTokenAmount",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1747,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "nftPerAddressLimit",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1750,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "paused",
        "offset": 0,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1753,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "revealed",
        "offset": 1,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1756,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "onlyWhitelisted",
        "offset": 2,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1759,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "deployedverified",
        "offset": 3,
        "slot": "14",
        "type": "t_bool"
      },
      {
        "astId": 1763,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "_nftcreator",
        "offset": 4,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 1766,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "whitelistedAddresses",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1770,
        "contract": "contracts/AntiApe.sol:AntiApe",
        "label": "addressMintedBalance",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}